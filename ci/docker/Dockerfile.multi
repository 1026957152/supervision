FROM golang:latest as builder
RUN mkdir /build
ADD . /build/
WORKDIR /build
#RUN go build -o main .
RUN CGO_ENABLED=0 GOOS=linux go build -o main .

FROM alpine:latest AS production
RUN adduser -S -D -H -h /app appuser
USER appuser
COPY --from=builder /build/ /app/
WORKDIR /app
CMD ["./main"]

#docker build -t hellocloudreachmain:1.1 . -f Dockerfile.multi
#... (build output omitted)
#docker images | grep hellocloudreachmain




FROM gradle:4.6-jdk8-alpine as compile
COPY . /home/source/java
WORKDIR /home/source/java
# Default gradle user is `gradle`. We need to add permission on working directory for gradle to build.
USER root
RUN chown -R gradle /home/source/java
USER gradle
RUN gradle clean build

FROM openjdk:8-jre-alpine
WORKDIR /home/application/java
COPY --from=compile "/home/source/java/build/libs/gs-spring-boot-0.1.0.jar" .
EXPOSE 8080
ENTRYPOINT [ "java", "-jar", "/home/application/java/gs-spring-boot-0.1.0.jar"]





FROM java:openjdk-8-alpine

ARG JAR_FILE
ARG BUILD_VERSION
VOLUME /tmp
# ADD loan-0.0.6-SNAPSHOT.jar app.jar
ADD ${JAR_FILE}-${BUILD_VERSION}.jar app.jar


RUN sh -c 'touch /app.jar'
ENV JAVA_OPTS=""
ENTRYPOINT [ "sh", "-c", "java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar" ]



docker build --build-arg var_name=${VARIABLE_NAME} (...)


docker build -t $DOCKER_ACC/$DOCKER_REPO:$IMG_TAG .