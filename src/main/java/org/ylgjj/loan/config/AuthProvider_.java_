package org.ylgjj.loan.config;


import io.jsonwebtoken.Claims;
import io.jsonwebtoken.impl.TextCodec;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 * This class is responsible for checking the token.
 */

@Component
public class AuthProvider_ implements AuthenticationProvider {



	@Autowired
	private ConfigProperties configProperties;

/*
	@Autowired
	TokenStore tokenStore;
*/


/*
	@Autowired
	private EmployeeRemoteClient employeeRemoteClient;
*/

	@Override
	public Authentication authenticate(Authentication auth) throws AuthenticationException {


		final AuthenticationToken tokenContainer = (AuthenticationToken) auth;
		final String appid = tokenContainer.getAppid();
		final String sign = tokenContainer.getSign();
		final String signPost = tokenContainer.getSignPost();
		System.out.println(sign+"-我们在 验证中 啊啊啊 appid------------- "+appid);
		System.out.println(sign+"-我们在 验证中 啊啊啊 sign------------- "+sign);
		System.out.println(sign+"-我们在 验证中 啊啊啊 signPost------------- "+signPost);


/*
		if(!sign.equals(signPost)){
			throw  new BadCredentialsException("签名验证失败");
		}
*/

		if(appid== null){
			throw  new BadCredentialsException("appid 不能为空");
		}
	/*	Claims body = null;
		try{
			body = JWTtest.parse(appid);

		}catch (io.jsonwebtoken.MalformedJwtException e){
			throw  new BadCredentialsException("appid 非法");
		}



		String subject = body.getSubject();
		System.out.println("the subject is: " + subject);
		System.out.println("the studentId is: " + body.get("password"));
		System.out.println("the studentId is: " + body.get("user"));

		if(!body.get("user").equals("icbc")){
			throw  new BadCredentialsException("appid 无效");
		}
*/
		System.out.println(sign+"-yanzheng------------- "+appid);
		System.out.println(configProperties.getIcbc().getAppid());
//if(appid.equals(configProperties.getIcbc().getAppid())){

	return new UsernamePasswordAuthenticationToken("icbc", "aa",   Collections.emptyList());

/*}else{
	throw  new AuthenticationCredentialsNotFoundException("appid 无效");

}*/


	/*	Map map =registerSmsServer.verify(token,smsAction.getSessionUuid());

		System.out.println("------------------++++++++++++++++++"+map.toString());
		if((boolean)map.get("status")){
			System.out.println("------------------++++++++++++++++++"+user.toString());
		}else{
			throw new
					BadCredentialsException("验证码错误 External system authentication failed");
		}*/

	}

	@Override
	public boolean supports(Class<?> authentication) {
		//this class is only responsible for AuthTokenContainers
		return AuthenticationToken.class.isAssignableFrom(authentication);
	//	return authentication.equals(UsernamePasswordAuthenticationToken.class);

	}

	private List<GrantedAuthority> buildUserAuthority(Set<String> userRoles) {
		Set<GrantedAuthority> setAuths = new HashSet<GrantedAuthority>();
		// Build user's authorities
		for (String userRole : userRoles) {
			setAuths.add(new SimpleGrantedAuthority(userRole));
		}
		return new ArrayList<GrantedAuthority>(setAuths);
	}
}