package org.ylgjj.loan.config;



import com.fasterxml.jackson.databind.ObjectMapper;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.impl.TextCodec;
import org.apache.commons.codec.digest.DigestUtils;
import org.springframework.security.authentication.AuthenticationManager;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;
import org.springframework.web.util.ContentCachingRequestWrapper;
import org.ylgjj.loan.domain.Query;
import org.ylgjj.loan.util.SecuritySHA1Utils;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;


public class JWTAuthorizationFilter_ extends BasicAuthenticationFilter {
    private String secret = "fenerbahce";

    private ConfigProperties configProperties = null;

    public JWTAuthorizationFilter_(AuthenticationManager authManager, ConfigProperties configProperties) {
        super(authManager);
        this.configProperties = configProperties;
      //  setAuthenticationSuccessHandler(successHandler);
       // setAuthenticationFailureHandler(failureHandler);
    }

    @Override
    protected void doFilterInternal(HttpServletRequest req_,
                                    HttpServletResponse res,
                                    FilterChain chain) throws IOException, ServletException {


        System.out.println("收到请求：jdoFilterInternal"+ req_.toString());
        ObjectMapper mapper = new ObjectMapper();


        RequestWrapper requestWrapper = new RequestWrapper((HttpServletRequest) req_);
        String requestData = requestWrapper.getReader().lines().collect(Collectors.joining());
        Query book = mapper.readValue(requestData,Query.class);

        Map compactJws = resolveToken(requestWrapper);


        if (compactJws == null ) {
            chain.doFilter(requestWrapper, res);
            return;
        }
        String sign = requestWrapper.getParameter("sign");



        AuthenticationToken authToken = new AuthenticationToken(
                book.getAppid(), (String)compactJws.get("sign"),sign);


            Authentication authToken_new = getAuthenticationManager().authenticate(authToken);
        System.out.println("Authentication   jdoFilterInternal"+ authToken_new.toString());
            SecurityContextHolder.getContext().setAuthentication(authToken_new);




        chain.doFilter(requestWrapper, res);
    }

    public Map resolveToken(HttpServletRequest req) {
        req.getParameter("sign");



        String sign = req.getParameter("sign");
        String zjbzxbm = req.getParameter("zjbzxbm");
        String xingming = req.getParameter("xingming");
        String zjhm = req.getParameter("zjhm");
        String appid = req.getParameter("appid");
        String zjhlx = req.getParameter("zjhlx");
        String citybm = req.getParameter("citybm");


        System.out.println("zjbzxbm:"+zjbzxbm);
        System.out.println("xingming:"+xingming);
        System.out.println("zjhm:"+zjhm);
        System.out.println("appid:"+appid);
        System.out.println("sign:"+sign);

        Query query = new Query();
        //query.setZjbzxbm(zjbzxbm);
        query.setZjhlx(zjhlx);
        query.setCitybm(citybm);
        query.setXingming(xingming);
        query.setZjhm(zjhm);
        query.setAppid(appid);

        Map abc = SecuritySHA1Utils.encodePassword(query,configProperties.getIcbc().getKey(),configProperties.getIcbc().getAppid());


        if(abc != null){


            return abc;
        }









        System.out.println("appid:"+appid);
        System.out.println("sign:"+sign);


/*        String bearerToken = req.getHeader("Authorization");
        if (bearerToken != null && bearerToken.startsWith("Bearer ")) {
            System.out.println("Bearer:"+ bearerToken);

            return bearerToken.substring(7, bearerToken.length());
        }*/

  /*      String jwt = (String)req.getParameter("sign");

        if(jwt != null){
            System.out.println("jwt:"+ jwt);
            return jwt;
        }
*/
        System.out.println("jwt+Authorization----:jwt"+ req.toString());
        return null;
    }

}